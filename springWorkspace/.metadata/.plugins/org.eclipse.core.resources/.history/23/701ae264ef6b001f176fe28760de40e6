package com.kosta.controller;

import java.util.List;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.kosta.domain.UserSignUpRequest;
import com.kosta.domain.UserDeleteRequest;
import com.kosta.domain.UserResponse;
import com.kosta.domain.UserUpdateRequest;
import com.kosta.service.UserService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {
	// userService
	private final UserService userService;
	
	
	@PostMapping("")
	public ResponseEntity<UserResponse> signUp(@RequestBody UserSignUpRequest signUpRequest) {
		// 회원가입
		UserResponse signUpUser = userService.signUp(signUpRequest);
		return ResponseEntity.status(HttpStatus.CREATED).body(signUpUser);
	}
	
	@GetMapping("/duplicate")
	public ResponseEntity<Boolean> emailCheck(@RequestParamap("email") String email) {
		boolean isNotDuplicate = userService.duplicateCheckEmail(email);
		return ResponseEntity.ok(isNotDuplicate);
	}
	
	
	// 회원 전체 리스트
	@GetMapping("")
	public ResponseEntity<List<UserResponse>> getUserList() {
		List<UserResponse> userList = userService.getUserList();
		return ResponseEntity.ok(userList);
	}
	
	// 회원 정보 수정
	@PatchMapping
	public ResponseEntity<UserResponse> updateUser(@RequestBody UserUpdateRequest updateRequest) {
		UserResponse updatedUser = userService.updateUser(updateRequest);
		return ResponseEntity.ok(updatedUser);
	}
	
	// 회원 삭제
	@DeleteMapping("")
	public ResponseEntity<UserResponse> userWithDraw(@RequestBody UserDeleteRequest deleteRequest) {
		userService.deleteUser(deleteRequest);
		return ResponseEntity.ok(null);
	}
}
