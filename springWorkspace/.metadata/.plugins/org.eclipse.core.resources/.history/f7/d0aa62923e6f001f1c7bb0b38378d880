package com.kosta.controller;

import java.util.List;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.event.AuthenticationFailureServiceExceptionEvent;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.kosta.domain.request.LoginRequest;
import com.kosta.domain.request.UserDeleteRequest;
import com.kosta.domain.request.UserSignUpRequest;
import com.kosta.domain.request.UserUpdateRequest;
import com.kosta.domain.response.LoginResponse;
import com.kosta.domain.response.UserResponse;
import com.kosta.service.UserService;
import com.kosta.util.TokenUtils;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
public class AuthController {
	// userService
	private final UserService userService;
	private final TokenUtils tokenUtils;

	// 토큰 재발급
	@PostMapping("/refresh-token")
	public ResponseEntity<LoginResponse> refreshToken(HttpServletRequest req, HttpServletResponse res) {
		// 토큰 요청

		// 토큰 재발급 불가인 경우, 401 에러 반환
		Map<String, String> tokenMap = userService.refreshToken(req);
		if (tokenMap == null) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
		}
		// 헤더 Cookie refresh 토큰 재발급
		tokenUtils.setRefreshTokenCookie(res, tokenMap.get("refreshToken"));

		// 응답 Body access 토큰 재발급
		return ResponseEntity.ok(LoginResponse.builder().accessToken(tokenMap.get("accessToken")).build());
	}

	// 회원가입
	@PostMapping("/signup")
	public ResponseEntity<UserResponse> signUp(@RequestBody UserSignUpRequest signUpRequest) {
		log.info("[signup] 회원가입 진행, 요청정보 : {}", signUpRequest);
		UserResponse signUpUser = userService.signUp(signUpRequest);
		return ResponseEntity.status(HttpStatus.CREATED).body(signUpUser);
	}

	@GetMapping("/duplicate")
	public ResponseEntity<Boolean> emailCheck(@RequestParam("email") String email) {
		boolean isNotDuplicate = userService.duplicateCheckEmail(email);
		System.out.println("Checking email: " + email + ", Is not duplicate: " + isNotDuplicate);
		return ResponseEntity.ok(isNotDuplicate);
	}

	// 회원 전체 리스트
	@GetMapping("")
	public ResponseEntity<List<UserResponse>> getUserList() {
		List<UserResponse> userList = userService.getUserList();
		return ResponseEntity.ok(userList);
	}

	// 회원 정보 수정
	@PatchMapping
	public ResponseEntity<UserResponse> updateUser(@RequestBody UserUpdateRequest updateRequest) {
		UserResponse updatedUser = userService.updateUser(updateRequest);
		return ResponseEntity.ok(updatedUser);
	}

	// 회원 삭제
	@DeleteMapping("")
	public ResponseEntity<UserResponse> userWithDraw(@RequestBody UserDeleteRequest deleteRequest) {
		userService.deleteUser(deleteRequest);
		return ResponseEntity.ok(null);
	}
}
