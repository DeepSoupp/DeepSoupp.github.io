package com.kosta.security;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import lombok.extern.slf4j.Slf4j;

//목적 - 로그인 요청을 처리하고, 인증이 성공하면 JWT 토큰을 발급
//작동방식
//- 로그인 요청에서 사용자 정보를 읽어 UsernamePasswordAuthenticationToken 생성
//- 인증 매니저를 통해 인증을 수행하고, 성공적인 인증 후 JwtAuthenticationService 통해 JWT 토큰발행

@Slf4j
public class LoginCustomAuthenticationFilter extends AbstractAuthenticationProcessingFilter {
	private static final AntPathRequestMatcher LOGIN_PATH = new AntPathRequestMatcher("api/user/login", "POST");
	private JwtAuthenticationService jwtAuthenticationService;

	public LoginCustomAuthenticationFilter(AuthenticationManager authenticationManager,
			JwtAuthenticationService jwtAuthenticationService) {
		super(LOGIN_PATH);
		setAuthenticationManager(authenticationManager);
		this.jwtAuthenticationService = JwtAuthenticationService;
	}
}
