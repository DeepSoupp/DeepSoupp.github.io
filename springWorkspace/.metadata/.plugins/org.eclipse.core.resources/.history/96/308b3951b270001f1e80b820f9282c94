package com.kosta.security;

import java.util.Date;

import javax.crypto.SecretKey;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Service;

import com.kosta.entity.User;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@RequiredArgsConstructor
public class JwtProvider {
	private final UserDetailsService userDetailsService;
	// JWT 관련 설정 정보 객체 주입 만료시간 등등
	private final JwtProperties jwtProperties;

	// JWT Access 토큰 생성
	public String generateAccessToken(User user) {
		log.info("[generateAccessToken] 액세스 토큰 생성");
		Date now = new Date();
		Date expiredDate = new Date(now.getTime() + jwtProperties.getAccessDuration());
		return makeToken(user, expiredDate);
	}

	// JWT Refresh 토큰 생성
	public String generateRefreshToken(User user) {
		log.info("[generateAccessToken] 리프레시 토큰 생성");
		Date now = new Date();
		Date expiredDate = new Date(now.getTime() + jwtProperties.getRefreshDuration());
		return makeToken(user, expiredDate);
	}

	// 토큰 생성 공통 메소드
	private String makeToken(User user, Date expiredDate) {
		String token = Jwts.builder().header().add("typ", "JWT").and().issuer(jwtProperties.getIssuer())
				.issuedAt(new Date()).expiration(expiredDate).subject(user.getEmail()).claim("id", user.getId())
				.claim("role", user.getRole()).signWith(getSecretKey(), Jwts.SIG.HS256).compact();
		log.info("완성된 토큰 : {}", token);
		return token;
	}

	// 비밀키 생성 메소드
	private SecretKey getSecretKey() {
		return Keys.hmacShaKeyFor(jwtProperties.getSecretKey().getBytes());
	}

	// 토큰 유효성 검증 메소드
	public boolean validateToken(String token) {
		log.info("토큰 검증 시작");
		try {
			Jwts.parser().verifyWith(getSecretKey()).build().parseSignedClaims(token);
			log.info("토근 검증 성공");
			return true;
		} catch (Exception e) {
			log.info("토큰 검증 실패");
			return false;
		}
	}

	// 토큰에서 정보를(Claim) 추출 메소드
	private Claims getClaims(String token) {
		return Jwts.parser().verifyWith(getSecretKey()).build().parseSignedClaims(token).getPayload();
	}

	// 토큰에서 인증정보 반환 메소드
	private Authentication getAuthenticationByToken(String token) {
		String userEmail = getUserEmailByToken(token);
		User user = (User) userDetailsService.loadUserByUsername(userEmail);
		Authentication authentication = new UsernamePasswordAuthenticationToken(user, token);
	}

	private String getUserEmailByToken(String token) {
		return null;
	}

}
