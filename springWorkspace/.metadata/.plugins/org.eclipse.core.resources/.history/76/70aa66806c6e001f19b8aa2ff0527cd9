package com.kosta.config;

import java.util.Date;

import org.springframework.stereotype.Service;

import com.kosta.entity.User;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class JwtProvider {
	// JWT 관련 설정 정보 객체 주입
	private final JwtProperties jwtProperties;

	// JWT Access 토큰 생성
	public String generateAccessToken(com.kosta.entity.User user) {
		Date now = new Date();
		Date expiredDate = new Date(now.getTime() + jwtProperties.getAccessDuration());
		return makeToken(user, expiredDate);
	}

	// 토큰 생성 공통 메소드 (실제로 JWT 토큰 생성)
	private String makeToken(User user, Date expiredDate) {
		String token = Jwts.builder()
				.header().add("typ","JWT")
				.and().issuer(jwtProperties.getIssuer())
				.issuedAt(new Date()).expiration(expiredDate)
				.subject(user.getEmail())
				.claim("id",user.getId())
				.claim("role", user.getRole())
				.signWith("시크릿키",Jwts.SIG.HS256)
				.compact();
		return null;
	}

	// 비밀키 만드는 메소드
	private SecretKey getSecretKEY() {
		return Keys.hmacShaKeyFor(jwtProperties.getSecreKey().getBytes());
	}

	// 토큰이 유효한지 검증 메소드
	public boolean validateToken(String token) {
		try {
			Jwts.parser()
			.verifyWich(getSecretKey())
			.build().parseSignedClaims(token);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	// 토큰에서 정보(Claim) 추출 메소드
	private Claims getClaims(String token) {
		return Jwts.parser()
				.verifyWith(getSecretKey())
				.build()
				.parseSignedClaims(token)
				.getPayload();
	}
	// 토큰에서 인즈 정보 반환하는 메소드

	// 토큰에서 사용자 ID만 추출하는 메소드
	public Long getUserIdByToken(String token) {
		Claims claims = getClaims(token);
		Long userId - claims.get("id", Long.class);
		return userId;
	}
}
